<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Modeling of Everything</title>
    <link>http://shuod.github.io/post/</link>
    <description>Recent content in Posts on Modeling of Everything</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 21 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://shuod.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VS code for building CC&#43;&#43; code using task.json 2.0.0</title>
      <link>http://shuod.github.io/post/vs-code-for-building-cc&#43;&#43;-code-using-task.json-2.0.0/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/vs-code-for-building-cc&#43;&#43;-code-using-task.json-2.0.0/</guid>
      <description>Vistual studio code is a modern UI using electron. It is like Vim/ Emacs that just focus on user interface. Then, if you want to use it as the IDE for certain programing language, like python, C, C++, javascript etc, you will need to configure it youself. And VS code become more popular after it has been the IDE coming with the Anaconde python package (Yes, it VS code looks better than spyder).</description>
    </item>
    
    <item>
      <title>Tmux</title>
      <link>http://shuod.github.io/post/tmux-and-tmuxomatic/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/tmux-and-tmuxomatic/</guid>
      <description>Tmux I sometimes need to compile software package in the High Performance Computer(HPC). The compiling process often takes very long because C++ never pays any attention to this (Thank google, we now have golang that has a significantly shorter compiling time). It will become a serious trouble for remote compiling, because network could go wrong at any moment therefore, the compiling process in the HPC will be interrupted. Unfortunately, remote access comprises majority of the working senario: we used a ssh client (say, putty or iTerm) to connect to the HPC and excute command remotely.</description>
    </item>
    
    <item>
      <title>Scandir in python35</title>
      <link>http://shuod.github.io/post/scandir-in-python35/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/scandir-in-python35/</guid>
      <description>As one of my daily works, checking files from simulation results is of course my practical need. Therefore, I am always interested in using different ways to do it. One of my previous post, &amp;ldquo;checking_files_in_subfolders_using_power_shell&amp;rdquo; was on how to use power shell in windows 10 to do this job. Here I am going to test other ways that I used even before powershell script.
1 find This is a Linux command and it is actually my first way to iterate folders to find files, since the operation system I work with in Supercomputer is Linux.</description>
    </item>
    
    <item>
      <title>scandir in python35</title>
      <link>http://shuod.github.io/post/test-of-scandir-in-python35/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/test-of-scandir-in-python35/</guid>
      <description>Test of scandir in python35 As one of my daily works, checking files from simulation results is of course my practical need. Therefore, I am always interested in using different ways to do it. One of my previous post, &amp;ldquo;checking_files_in_subfolders_using_power_shell&amp;rdquo; was on how to use power shell in windows 10 to do this job. Here I am going to test other ways that I used even before powershell script.</description>
    </item>
    
    <item>
      <title>Checking files in subfolders using power shell</title>
      <link>http://shuod.github.io/post/checking_files_in_subfolders_using_power_shell/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/checking_files_in_subfolders_using_power_shell/</guid>
      <description>As daily work, sometime I need to check some log files from certain calculations &amp;ndash; a large number of calculations. Usually they contain some keyword or sentence, like &amp;ldquo;Normal termination&amp;rdquo; or &amp;ldquo;Calculation ended&amp;rdquo; or &amp;ldquo;succussefully conveged&amp;rdquo; for me to search.
This is a typical job that can be done rountinely in linux using commands like &amp;ldquo;grep&amp;rdquo;, &amp;ldquo;awk&amp;rdquo;. However, after download those file to a windows PC, it would be more convinient to use windows shell to do, although there exists some &amp;ldquo;tranplanted&amp;rdquo; version of some of the linux shell commands that are complied with native win32 toolchains.</description>
    </item>
    
    <item>
      <title>A good way to improve writing</title>
      <link>http://shuod.github.io/post/a-good-way-to-improve-writing/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/a-good-way-to-improve-writing/</guid>
      <description>Many faces of the writing Writing can be for many purposes and they are all different. For a story writing or an anecdote, you have many adjectives for different things. For analytical essay, you have many judgements and reasoning words to piece up the logic. And for academic journal writing, you want to have plain language and fluent logic.
​ It is very interesting that in academic writing, you both want to avoid jargon and use jargon.</description>
    </item>
    
    <item>
      <title>Installing octopus 6.0 (Serial) in Centos 6.8 </title>
      <link>http://shuod.github.io/post/install-octopus-5/</link>
      <pubDate>Sat, 14 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/install-octopus-5/</guid>
      <description>Octopus is a scientific simulation software for solving quantum problem. (http://www.tddft.org/programs/octopus/wiki/index.php/Main_Page)
Recently, there is a new version 6.0 released (2016-09-05), which has a major improvement. Here we try to install it on the Centos 6.8 (with minimal installation)
First, install Centos 6.8 with minimal installation choice. Installation of octopus 6 mainly follow their manual here : http://www.tddft.org/programs/octopus/wiki/index.php/Manual:Building_from_scratch
1. install several compilers to use. You can check your current available compilers by</description>
    </item>
    
    <item>
      <title>Upgrade python to version 3.5 in Centos 6.8 and deploy flask web app framework  (updated on 20170604)</title>
      <link>http://shuod.github.io/post/upgrade-python3-centos6-deploy-flask/</link>
      <pubDate>Tue, 13 Sep 2016 10:33:28 -0600</pubDate>
      
      <guid>http://shuod.github.io/post/upgrade-python3-centos6-deploy-flask/</guid>
      <description>Updated on 20170604: I put in more content to setup on tools chain for python development environment. Extra options were deleted.
I bought a VPS from ramnode last time (last blog), so I guess it is a good time to deploy some web application on it. Since the python came with Centos 6.8 is kind of old (python 2.6), the first step I take is to upgrade the python compiler in Centos 6.</description>
    </item>
    
    <item>
      <title>Setup a Virtual Private Server(VPS) from Ramnode and benchmark it</title>
      <link>http://shuod.github.io/post/setup-a-vps-server/</link>
      <pubDate>Fri, 12 Aug 2016 10:33:28 -0600</pubDate>
      
      <guid>http://shuod.github.io/post/setup-a-vps-server/</guid>
      <description>&lt;p&gt;Virtual Private Server (VPS) is a new way to host a personal server. It hides the hardware detials from the user (which is safe) and delivers a flexible (sometime even real time adjustable) performance to the server. They usually have two types: KVM and OPENVZ. The difference of the two virtualization method is the the OPENVZ is container-like, which is also limited to linux only, but KVM use the main OS system to simulate the hardware for user-OS, which theoretically allows any type of the operation system. Because of the working principle of KVM, it could provide better isolation (Those guys doing virus analysis would like this). However, if you are looking for better performance of the Linux system, openvz maybe a better choice.&lt;/p&gt;

&lt;p&gt;VPS from commercial providers is a perfect source to setup a personal server. This article will include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bought a VPS&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Benchmarking the performance of the VPS&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notes to Test driven development with Django using pycharm (chp 5 database!)</title>
      <link>http://shuod.github.io/post/tdd-django-pycharm-4-database-intro/</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/tdd-django-pycharm-4-database-intro/</guid>
      <description>0 Checkpoints  ORM model in Django  1 The first unit test First, let&amp;rsquo;s write the unit test for database. What are we going to test then? Well, as we discussed in the last section, the unit test is about testing the logic, flow control. So what we are going to do here is to test:
 We input a value as the first row in the webpage. Does the database receives the same value as the input?</description>
    </item>
    
    <item>
      <title>Notes to Test driven development with Django using pycharm (chp 4-5)</title>
      <link>http://shuod.github.io/post/tdd-django-pycharm-3/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/tdd-django-pycharm-3/</guid>
      <description>0 Checkpoints  Don&amp;rsquo;t use unit test to test a constant. Unit test is about testing logic, flow control and configuration.
 Run unit tests from pycharm IDE : Tools\=\=&amp;gt;Run manage.py task &amp;hellip;
 Another development cycle, follow the pattern, i.e. if you choose MCV, then if you changed M then you should change C, and V correspondingly.
 Organize the code in unit test: create test, call function under the test and assertions</description>
    </item>
    
    <item>
      <title>Notes to Test driven development with Django using pycharm (chp 2-3)</title>
      <link>http://shuod.github.io/post/tdd-django-pycharm-2/</link>
      <pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/tdd-django-pycharm-2/</guid>
      <description>0 Checkpoints  Blackbox Test=Functional Test=Acceptance Test= End-to-End Test ; These names are referring to the same thing. The purpose of this kind of test is to look at how the whole application functioned from outside/custom&amp;rsquo;s point of view. The term black box test is forged is because we just want to test the outcome of the whole code without knowing the details inside App = function; Structure the code into several apps/ functions (def function()).</description>
    </item>
    
    <item>
      <title>Notes to test driven development with Django using pycharm (chp 0)</title>
      <link>http://shuod.github.io/post/tdd-django-pycharm-0/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/tdd-django-pycharm-0/</guid>
      <description>0 Checkpoints  Tips for pycharm IDE (from Tip of the Day)  Rename the variable name / identifier : rename the variable at any place by pressing &amp;ldquo;Shift+F6&amp;rdquo; afterward then variable names at every place will be changed to the new name.   1 Book choice  Most of the content is my note to the &amp;ldquo;test driven web development using python&amp;rdquo; that is available at: http://www.obeythetestinggoat.com  The reason choosing this book is to learn what is called &amp;ldquo;test driven development (TDD)&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Notes to test driven development with Django using pycharm (chp 1)</title>
      <link>http://shuod.github.io/post/tdd-django-pycharm-1/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/tdd-django-pycharm-1/</guid>
      <description>0 Check points  Setting up a virtual environment and adding packages to the project Editing the command line parameters to the &amp;ldquo;run&amp;rdquo; button, which is equivalent to &amp;ldquo;python xxx.py xxx&amp;rdquo; Checking the output log space on the bottom of the screen. Functional test to retrieve the web page from a server  1 setup the virtual environment After downloading and installing the pycharm, the first time you start you would see the following:</description>
    </item>
    
    <item>
      <title>Using PBS commands in HPC</title>
      <link>http://shuod.github.io/post/using-pbs-commands-in-hpc/</link>
      <pubDate>Fri, 13 May 2016 13:32:24 -0500</pubDate>
      
      <guid>http://shuod.github.io/post/using-pbs-commands-in-hpc/</guid>
      <description>&lt;p&gt;PBS, or Portable Batch System is one of the popular job scheduler used in HPC (High Performance Computer) cluster system. It provides useful commands to help with job management. Here I just list some of them for note.&lt;/p&gt;

&lt;p&gt;Some useful PBS commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;qsub&lt;/li&gt;
&lt;li&gt;showq&lt;/li&gt;
&lt;li&gt;qstat&lt;/li&gt;
&lt;li&gt;qdel&lt;/li&gt;
&lt;li&gt;qpeek&lt;/li&gt;
&lt;li&gt;pbsnode&lt;/li&gt;
&lt;li&gt;qalter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linear Regression with different Python libs: numpy, scipy</title>
      <link>http://shuod.github.io/post/linear-regression-with-python-lib/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuod.github.io/post/linear-regression-with-python-lib/</guid>
      <description>&lt;p&gt;Linearing regression is one of the fundamental techqiques to use when analyze the data. If you were using Python, you would have several options to do this, including numpy, scipy and sklearn.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to setup a static blog site using Hugo (hosted on github)</title>
      <link>http://shuod.github.io/post/first/</link>
      <pubDate>Sat, 02 Apr 2016 10:40:00 -0600</pubDate>
      
      <guid>http://shuod.github.io/post/first/</guid>
      <description>&lt;p&gt;Huog is a blog generating system written in go. You could give the article in Markdown format and it will then render the article into html files. Github.com is the place where it uses git to do the version control and they now provide each account a static blog system. So combine the two together, we then have an ideal personal blog with version control. This will include the following topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate a blog site using hugo&lt;/li&gt;
&lt;li&gt;Host the webpage source code on github.com&lt;/li&gt;
&lt;li&gt;Host the hugo output(webpage to show) on github.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding a comment system to the hugo blog</title>
      <link>http://shuod.github.io/post/second/</link>
      <pubDate>Thu, 21 Jan 2016 22:59:16 -0600</pubDate>
      
      <guid>http://shuod.github.io/post/second/</guid>
      <description>&lt;p&gt;One of the shortcoming of static blog system is they usually don&amp;rsquo;t have a comment system. But good news is there are many 3rd party comment systems available, one of which is Disqus.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>